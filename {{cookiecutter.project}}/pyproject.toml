[project]
name = "{{ cookiecutter.slug }}"
description = "{{ cookiecutter.description }}"
authors = [
    {name = "{{ cookiecutter.author }}", email = "{{ cookiecutter.author_email }}"}
]
readme = {file = "README.md", content-type = "text/markdown"} 
dynamic = [
    "version"
]
requires-python = "~= {{ cookiecutter.python_version }}"
license = {file = "LICENSE"}
dependencies = []

{% if cookiecutter.type == "cli app" %}
[project.scripts]
{{ cookiecutter.entrypoint }} = "{{ cookiecutter.slug }}.{{ cookiecutter.slug }}:main" 
{% endif %}

[project.optional-dependencies]
dev = [
    '{{ cookiecutter.slug }}[black]',
    '{{ cookiecutter.slug }}[ruff]',
    '{{ cookiecutter.slug }}[isort]',
    '{{ cookiecutter.slug }}[mypy]',
    '{{ cookiecutter.slug }}[pytest]'
]
black = [
    'black==23.3.0',
]
ruff = [
    'ruff==0.0.263',
]
isort = [
    'isort==5.10.1',
]
mypy = [
    'mypy==1.2.0',
]
pytest = [
    'pytest==7.3.1',
    'pytest-cov==4.0.0',
    'coverage[toml]==7.2.5'
]
testing = [
    "tox==4.5.1"
]
docs = [
    "sphinx==6.2.1",
    "sphinx-autodoc-typehints==1.23.0",
    "sphinx-copybutton==0.5.2",
    "sphinx-inline-tabs==2023.4.21",
    "furo==2023.3.27"
]

[tool.setuptools.dynamic]
version = {attr = "{{ cookiecutter.slug }}.__version__.__version__"}

[tool.ruff]
exclude = [
    "docs"
]
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
# Same as Black.
line-length = 110
extend-select = [
    "UP", # Pyupgrade
    "RUF100", # Unused noqa (auto-fixable)
]
extend-ignore = [
    # Let isort handle
    "I",
    "E402"
]

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 8

[tool.black]
line-length = 110
target-version = ['{{ cookiecutter.py_version }}']

[tool.mypy]
strict_equality = true
disallow_untyped_decorators = false
warn_unreachable = true
follow_imports = "skip"
ignore_missing_imports = true

[tool.isort]
ensure_newline_before_comments = true
force_grid_wrap = 0
include_trailing_comma = true
known_testing = [
    "pytest", 
    "unittest"
]
known_typing = "typing"
line_length = 110
lines_between_sections = 0
multi_line_output = 3
sections = [
    "FUTURE", 
    "TYPING", 
    "TESTING", 
    "STDLIB", 
    "THIRDPARTY", 
    "FIRSTPARTY", 
    "LOCALFOLDER"
]
src_paths = "./{{ cookiecutter.slug }}/"
use_parentheses = true

[tool.pytest.ini_options]
testpaths = [
    "tests",
]
markers = [
    "unit: Unit tests", 
    "integration: Integration tests"
]
